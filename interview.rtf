{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fswiss\fcharset0 ArialMT;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 Menlo-Bold;\f5\fswiss\fcharset0 Helvetica;
\f6\fswiss\fcharset0 Helvetica-BoldOblique;}
{\colortbl;\red255\green255\blue255;\red15\green121\blue165;\red255\green255\blue255;\red155\green35\blue147;
\red255\green255\blue255;\red0\green0\blue0;\red15\green104\blue160;\red11\green79\blue121;\red28\green70\blue74;
\red12\green6\blue19;}
{\*\expandedcolortbl;;\cssrgb\c0\c54942\c70689;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c60759\c13753\c57628;
\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c10981\c27276\c28869;
\cssrgb\c5490\c2353\c9412;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
\paperw11900\paperh16840\margl1440\margr1440\vieww27660\viewh13920\viewkind0
\deftab560
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \
Hi <> Gd evening, This is Sudhakar, Sr. iOS application developer. I have 9 + years of experience in iOS application development. I am a post graduate with master of computer applications.  \
From the last two years I am working with client DBS Bank. \
My current project is Digi Bank SG. In DBS I worked on several applications like digi bank Indonesia, digi bank sg.\
My roles and responsibilities are coding, bug fixing, gathering requirements from business team, Involving in narrative walk through, \
sprint planning, daily stand-up calls, live deployments and following Jira tool for project management.\
\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf2 \ul \ulc0 Roles And Responsibilities:
\f0\b0 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \ulnone Coding, Bug fixing, Gathering requirements from business team, Involving in narrative walk through, sprint planning, daily stand-up calls, live deployments and following Jira tool for project management.\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf2 Closure:	
\f0\b0 \
Closures are self-contained blocks of functionality that can be passed around and used in your code.\
\
Closure simplification:\
\
Weak and unowned:\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 Both\'a0weak\'a0and\'a0unowned\'a0references wont create a\'a0strong\'a0hold on the referred object.\
\
weak -> nil\
unowned -> never be nil\
\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf2 Computed properties: 
\f0\b0 (variable with setter and getter)\
Computed properties are always variable defining setter and getter methods for a property \
\

\f1\b Stored Properties: 
\f0\b0 (constant or variable)\
A stored property is a constant or variable that is stored as part of an instance of a particular class or structure. Stored properties can be either variable stored properties (introduced by the var keyword) or constant stored properties (introduced by the let keyword).\
\

\f1\b Lazy Stored Properties:
\f0\b0 \
 A lazy stored property is a property 
\f1\b whose initial value is not calculated
\f0\b0  until the first time it is used. You indicate a lazy stored property by writing the lazy modifier before its declaration. \
 \
 2 - workitem, 		\
 \
\
\
@objc\
\

\f1\b Protocol extension\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\b0 \cf2 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf2 Optional Protocol:\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\b0 \cf2 \
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf2 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\b0 \cf2 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf2 Mutating function:\
\pard\pardeftab720\sl440\partightenfactor0

\f2\b0 \cf2 \cb3 \expnd0\expndtw0\kerning0
When you want to change a property inside a method, you need to mark it using the mutating keyword\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0 \cf2 \cb1 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf2 Structure vs class:\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b0 \cf2 Main difference between them is \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f0   \'95 Struct is value type \
\ls1\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0   \'95 Class is reference type \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 Both class and structure can do: \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f0 Define properties to store values \
\ls2\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Define methods to provide functionality \
\ls2\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Be extended Conform to protocols \
\ls2\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Define initialisers \
\ls2\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Define Subscripts to provide access to their variables \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
Only class can do: \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls3\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f0 Inheritance \
\ls3\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Type casting \
\ls3\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Define deinitialisers \
\ls3\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Allow reference counting for multiple references.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf2 @escaping and @nonescaping:
\f0\b0 \
Swift 2.0 \'97 escaping\
Swift 3.0 \'97 non escaping\
@non-escape: not allowed to escape the function body\

\f1\b Non-escaping:\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\b0 \cf2 When passing a closure as the function argument, the 
\f1\b closure gets execute with the function\'92s body
\f0\b0  and returns the compiler back. As the execution ends, the passed closure goes out of scope and have no more existence in memory.
\f1\b \
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 escaping:
\f0\b0 \
If a closure is passed as an argument to a function and 
\f1\b it is invoked after the function returns
\f0\b0 , the closure is escaping. It is also said that the closure argument escapes the function body.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf2 Un-wind segues:
\f0\b0  The mechanism for navigation in Storyboard-based applications is the segue.We can also travel backward in the screen \'93navigation stack\'94 by programming a special kind of segue called an unwind segue.\
\

\f1\b Comparable Protocol:\
\
Why swift Protocol Oriented Programming:\
\
\pard\pardeftab560\sa40\pardirnatural\partightenfactor0
\cf2 Swift generics:\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b0 \cf2 Generics\'a0are used to avoid duplication and to provide abstraction. Generic\'a0code enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you\'a0define.\
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f4\b\fs24 \cf4 \cb5 func
\f3\b0 \cf6  \cf7 swapValues\cf6 <\cf8 T\cf6 >(
\f4\b \cf4 _
\f3\b0 \cf6  a: 
\f4\b \cf4 inout
\f3\b0 \cf6  \cf9 T\cf6 , 
\f4\b \cf4 _
\f3\b0 \cf6  b: 
\f4\b \cf4 inout
\f3\b0 \cf6  \cf9 T\cf6 ) \{\
    
\f4\b \cf4 let
\f3\b0 \cf6  temp = a\
    a = b\
    b = temp\
\}\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b\fs36 \cf2 \cb1 Aawwnbg\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
NSOperationQueue and NSOperation:\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b0 \cf2 Optional chaining:
\f1\b \

\f0\b0 Optional chaining\'a0is a process for querying and calling properties, methods, and subscripts on an optional that might currently be\'a0nil.\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 1.Difference between category and extension\
2.Why swift is protocol oriented programming\
\
\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls4\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f0 An\'a0open\'a0class is\'a0accessible\'a0and\'a0subclassable\'a0outside of the defining module. An\'a0open\'a0class member is\'a0accessible\'a0and\'a0overridable\'a0outside of the defining module.\
\ls4\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 A\'a0public\'a0class is\'a0accessible\'a0but\'a0not subclassable\'a0outside of the defining module. A\'a0public class member is\'a0accessible\'a0but\'a0not overridable\'a0outside of the defining module.\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \
\
\
Swift 4 introduces a new\'a0Codable\'a0protocol that lets you serialize and deserialize custom data types without writing any special code \'96\'a0and without having to worry about losing your value types. Even better, you can choose how you want the data to be serialized: you can use classic property list format or even JSON.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 AnyObject\'a0refers to any instance of a class, and is equivalent to\'a0id\'a0in Objective-C.\
Any\'a0refers to any instance of a class, struct, or enum \'96\'a0literally anything at all.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\
\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 The Quality of Service (
\f1\b QoS
\f0\b0 ) qualifies the priority and helps the system optimise its performance. There are 5 QoS classes ordered from high to low priority:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls5\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f0 		
\f1\b User Interactive:
\f0\b0 \'a0it is the class that corresponds to the main thread.\
\ls5\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 		
\f1\b User Initiated:
\f0\b0 \'a0Actions triggered by the user does not have to run on the main thread. It is the equivalent of DISPATCH_QUEUE_PRIORITY_HIGH.\
\ls5\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 		
\f1\b Default: 
\f0\b0 the default QoS. It is the equivalent of DISPATCH_QUEUE_PRIORITY_DEFAULT.\
\ls5\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 		
\f1\b Utility:
\f0\b0  used for dispatch items that depend on system resources like file and network I/O. It is the equivalent of DISPATCH_QUEUE_PRIORITY_LOW.\
\ls5\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 		
\f1\b Background:
\f0\b0  Used for lower priority tasks. It is the equivalent of DISPATCH_QUEUE_PRIORITY_BACKGROUND.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\
\
\
\
\
1.What are the difficulties in swift programming ?\
2. NSThread and NSOperation \
3. Fascade \
4. MVC and MVVM\
\
\
\
\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf2 Swift 4 features:
\f0\b0 \
1. Codable and Decodable introduced\
2. Strings are literals\
3. Strings are collections\
4. KeyPaths for key value coding\
5. left and right hand side ranges\
\
Left hand- side ranges and right-hand side ranges.\
\

\f1\b User-Interactive: \
User-Initiated:\
Default:\
Utility:\
Background:\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\b0 \cf2 \
\
\
\
\
\
Swifty encoding and decoding\
\
Swifty encoding and decodingMulti-line string literals\
\
Improved key-paths for key-value coding.\
\
Strings are collections again\
\
One-sided ranges\
\
\
\
\
\
\
\pard\pardeftab560\sa40\partightenfactor0

\f1\b \cf2 Optionals\
Control Flow\
Tuples\
Guard And Defer:\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b0 \cf2 The major difference between\'a0
\f1\b if let
\f0\b0 \'a0and\'a0
\f1\b guard let
\f0\b0 \'a0is that your unwrapped optional remains usable after the\'a0
\f1\b guard
\f0\b0 \'a0code.\
Defer: The \'93defer\'94 is a keyword that provides a block of code that can be executed while the execution is leaving the current scope. \
\pard\pardeftab560\sa40\partightenfactor0

\f1\b \cf2 Functional Programming Patterns\
Enumerations:\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b0 \cf2 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\
\
1.  What is protocol ?\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 A\'a0
\f1\b protocol
\f0\b0 \'a0defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The\'a0
\f1\b protocol
\f0\b0 \'a0can then be adopted by a class, structure, or enumeration to provide an actual implementation of those requirements.\
\
2. Why Swift is called protocol oriented language?\
While in\'a0
\f1\b protocol oriented programming
\f0\b0 \'a0in\'a0
\f1\b swift
\f0\b0 : It can conform multiple\'a0
\f1\b protocols
\f0\b0 . It can be used by not only class, but also structures and enumerations. It has\'a0
\f1\b protocol
\f0\b0 \'a0extension which gives us common functionality to all types that conforms to a\'a0
\f1\b protocol
\f0\b0 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
2.  Enum?. \
\
3.  Enum and structure \
4.  Any and AnyObject\
\
5. 
\f1\b Value type and reference type
\f0\b0  :\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 A\'a0Value type\'a0is a type whose value is copied when it is assigned to a variable or constant, or when it is passed to a function.\
A\'a0Reference type\'a0is not copied when assigned to a variable or constant, or when they are passed to a function. Rather than a copy, a reference to the same existing instance is used instead.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \ul Roles And Responsibilities:\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \ulnone Coding. \
Bug fixing.\
Gathering requirements from business team.\
Suggesting new designs to business team.\
Involving in daily stand-up calls.\
Involving narrative walk through.\
Involving live deployment.\
Following Jeera-tool for project management.\
\
Closure:	\
Closures are self-contained blocks of functionality that can be passed around and used in your code.\
\
Closure simplification:\
\
Weak and unowned:\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 Both\'a0weak\'a0and\'a0unowned\'a0references wont create a\'a0strong\'a0hold on the referred object.\
\
weak -> nil\
unowned -> never be nil\
\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 Computed properties: (variable with setter and getter)\
Computed properties are always variable defining setter and getter methods for a property \
\
Stored Properties: (constant or variable)\
A stored property is a constant or variable that is stored as part of an instance of a particular class or structure. Stored properties can be either variable stored properties (introduced by the var keyword) or constant stored properties (introduced by the let keyword).\
\
Lazy Stored Properties:\
 A lazy stored property is a property whose initial value is not calculated until the first time it is used. You indicate a lazy stored property by writing the lazy modifier before its declaration. \
 \
 2 - workitem, 		\
 \
\
\
@objc\
\
Protocol extenstion\
\
Optional Protocol:\
\
\
Swift 4 features:\
\
Mutating function:\
\
\
Structure vs class:\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 Main difference between them is \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls6\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f0 	\'95 Struct is value type \
\ls6\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0   \'95 Class is reference type \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 Both class and structure can do: \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls7\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f0 Define properties to store values \
\ls7\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Define methods to provide functionality \
\ls7\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Be extended Conform to protocols \
\ls7\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Define intialisers \
\ls7\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Define Subscripts to provide access to their variables \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
Only class can do: \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls8\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f0 Inheritance \
\ls8\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Type casting \
\ls8\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Define deinitialisers \
\ls8\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 Allow reference counting for multiple references.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\
@escaping and @nonescaping:\
Swift 2.0 \'97 escaping\
Swift 3.0 \'97 non escaping\
@noescape - not allowed to escape the function body\
Non-escaping:\
When passing a closure as the function argument, the closure gets execute with the function\'92s body and returns the compiler back. As the execution ends, the passed closure goes out of scope and have no more existence in memory.\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 escaping:\
If a closure is passed as an argument to a function and it is invoked after the function returns, the closure is escaping. It is also said that the closure argument escapes the function body.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
Un-wind segues: The mechanism for navigation in Storyboard-based applications is the segue.We can also travel backward in the screen \'93navigation stack\'94 by programming a special kind of segue called an unwind segue.\
\
Comparable Protocol:\
\
Protocol oriented programming:\
\
Swift generics:\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 Generics\'a0are used to avoid duplication and to provide abstraction. Generic\'a0code enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you\'a0define.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
NSOperationQueue and NSOperation:\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 Optional chaining:\
Optional chaining\'a0is a process for querying and calling properties, methods, and subscripts on an optional that might currently be\'a0nil.\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 1.Difference between category and extension\
2.Why swift is protocol oriented programming\
\
\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls9\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f0 An\'a0open\'a0class is\'a0accessible\'a0and\'a0subclassable\'a0outside of the defining module. An\'a0open\'a0class member is\'a0accessible\'a0and\'a0overridable\'a0outside of the defining module.\
\ls9\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 A\'a0public\'a0class is\'a0accessible\'a0but\'a0not subclassable\'a0outside of the defining module. A\'a0public class member is\'a0accessible\'a0but\'a0not overridable\'a0outside of the defining module.\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \
\
\
Swift 4 introduces a new\'a0Codable\'a0protocol that lets you serialize and deserialize custom data types without writing any special code \'96\'a0and without having to worry about losing your value types. Even better, you can choose how you want the data to be serialized: you can use classic property list format or even JSON.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 AnyObject\'a0refers to any instance of a class, and is equivalent to\'a0id\'a0in Objective-C.\
Any\'a0refers to any instance of a class, struct, or enum \'96\'a0literally anything at all.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\
\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 The Quality of Service (QoS) qualifies the priority and helps the system optimize its performance. There are 5 QoS classes ordered from high to low priority:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls10\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f0 		User Interactive:\'a0it is the class that corresponds to the main thread.\
\ls10\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 		User Initiated:\'a0Actions triggered by the user does not have to run on the main thread. It is the equivalent of DISPATCH_QUEUE_PRIORITY_HIGH.\
\ls10\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 		Default: the default QoS. It is the equivalent of DISPATCH_QUEUE_PRIORITY_DEFAULT.\
\ls10\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 		Utility: used for dispatch items that depend on system resources like file and network I/O. It is the equivalent of DISPATCH_QUEUE_PRIORITY_LOW.\
\ls10\ilvl0
\f3 {\listtext	\uc0\u8226 	}
\f0 		Background: Used for lower priority tasks. It is the equivalent of DISPATCH_QUEUE_PRIORITY_BACKGROUND.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\
\
\
\
\
1.What are the difficulties in swift programming ?\
2. NSThread and NSOperation \
3. Fascade \
4. MVC and MVVM\
5. \
\
\
Map,  \
\
\
1. Codable and Decodable introduced\
2. Strings are literals\
3. Strings are collections\
4. KeyPaths for key value coding\
5. left and right hand side ranges\
\
\
Left hand- side ranges and right-hand side ranges.\
\
\
\
User-Interactive: \
User-Initiated:\
Default:\
Utility:\
Background:\
\
\
\
\
\
\
Swifty encoding and decoding\
\
Swifty encoding and decodingMulti-line string literals\
\
Improved key-paths for key-value coding.\
\
Strings are collections again\
\
One-sided ranges\
\
\
\
\
\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 Optionals\
Control Flow\
Tuples\
Guard And Defer\
Functional Programming Patterns\
Enumerations\
\
\
\pard\pardeftab720\sa400\partightenfactor0

\f5 \cf10 \cb3 \expnd0\expndtw0\kerning0
There are five states of an iOS app:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0
\f6\i\b \cf10 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
Not-running
\f5\i0\b0 \'a0- The app is not running.\cb1 \
\ls11\ilvl0
\f6\i\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
Inactive
\f5\i0\b0 \'a0- The app is running in the foreground, but not receiving events. An iOS app can be placed into an inactive state, for example, when a call or SMS message is received.\cb1 \
\ls11\ilvl0
\f6\i\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
Active
\f5\i0\b0 \'a0- The app is running in the foreground, and receiving events.\cb1 \
\ls11\ilvl0
\f6\i\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
Background
\f5\i0\b0 \'a0- The app is running in the background, and executing code.\cb1 \
\ls11\ilvl0
\f6\i\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
Suspended
\f5\i0\b0 \'a0- The app is in the background, but no code is being executed.\
\pard\pardeftab560\slleading20\partightenfactor0

\f0 \cf2 \cb1 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf2 \
\
\
\
\
\
\
\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \
\pard\pardeftab560\sa40\partightenfactor0

\f1\b \cf2 \
\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\b0 \cf2 \
\
\
\
\
\
\
\
\
}